name: "Brand impersonation: Adobe (QR code)"
description: "Detects messages using Adobe image based lures, referencing or including a QR code from an Unsolicited sender. These messages often lead users to phishing sites or initiate unwanted downloads. "
type: "rule"
severity: "high"
source: "type.inbound\nand (\n  any(attachments,\n      (.file_type in $file_types_images or .file_type == \"pdf\")\n      and (\n        any(ml.logo_detect(.).brands,\n            .name == \"Adobe\" and .confidence in (\"medium\", \"high\")\n        )\n        or any(ml.logo_detect(beta.message_screenshot()).brands,\n               .name == \"Adobe\"\n        )\n      )\n  )\n  or any(attachments,\n         .file_extension in $file_extensions_macros\n         and any(file.explode(.), .depth == 0 and .scan.docx.image_count > 0)\n         and any(file.explode(.),\n                 any(.scan.strings.strings, strings.ilike(., \"*adobe*\"))\n         )\n  )\n)\nand any(attachments,\n        (\n          .file_type in $file_types_images\n          or .file_type == \"pdf\"\n          or .file_type in $file_extensions_macros\n        )\n        and (\n          any(file.explode(.),\n              regex.icontains(.scan.ocr.raw, 'scan|camera')\n              and regex.icontains(.scan.ocr.raw, '\\bQR\\b|Q\\.R\\.|barcode')\n          )\n          or (\n            any(file.explode(.),\n                .scan.qr.type == \"url\"\n                // recipient email address is present in the URL, a common tactic used in credential phishing attacks \n                and any(recipients.to,\n                        (\n                          strings.icontains(..scan.qr.data, .email.email)\n                          and (\n                            .email.domain.valid\n                            or strings.icontains(.display_name, \"undisclosed\")\n                          )\n                        )\n\n                        // the recipients sld is in the senders display name\n                        or any(recipients.to,\n                               strings.icontains(sender.display_name,\n                                                 .email.domain.sld\n                               )\n                        )\n\n                        // the recipient local is in the body  \n                        or any(recipients.to,\n                               strings.icontains(body.current_thread.text,\n                                                 .email.local_part\n                               )\n                        )\n\n                        // or the body is null \n                        or body.current_thread.text is null\n                        or body.current_thread.text == \"\"\n\n                        // or the subject contains authentication/urgency verbiage\n                        or regex.contains(subject.subject,\n                                          \"(Authenticat(e|or|ion)|2fa|Multi.Factor|(qr|bar).code|action.require|alert|Att(n|ention):)\"\n                        )\n\n                        // high confidence cred theft in body\n                        or any(ml.nlu_classifier(body.current_thread.text).intents,\n                               .name == \"cred_theft\" and .confidence in (\"high\")\n                        )\n                )\n            )\n          )\n        )\n)\nand (\n  not any(headers.hops,\n          .authentication_results.compauth.verdict is not null\n          and .authentication_results.compauth.verdict == \"pass\"\n          and sender.email.domain.root_domain in (\n            \"acrobat.com\",\n            \"adobecc.com\",\n            \"adobecces.com\",\n            \"adobeccstatic.com\",\n            \"adobe.com\",\n            \"adobeexchange.com\",\n            \"adobe-identity.com\",\n            \"adobe.io\",\n            \"adobejanus.com\",\n            \"adobelogin.com\",\n            \"adobe.net\",\n            \"adobeprojectm.com\",\n            \"adoberesources.net\",\n            \"adobesc.com\",\n            \"adobesign.com\",\n            \"adobestock.com\",\n            \"createjs.com\",\n            \"licensingstack.com\",\n            \"myportfolio.com\",\n            \"photoshop.com\",\n            \"typekit.com\",\n            \"typekit.net\"\n          )\n  )\n)\n\n// negate highly trusted sender domains unless they fail DMARC authentication\nand (\n  (\n    sender.email.domain.root_domain in $high_trust_sender_root_domains\n    and not headers.auth_summary.dmarc.pass\n  )\n  or sender.email.domain.root_domain not in $high_trust_sender_root_domains\n)\nand (\n  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "PDF"
  - "QR code"
detection_methods:
  - "Computer Vision"
  - "Header analysis"
  - "QR code analysis"
  - "Sender analysis"
id: "2fc36c6d-86a2-5b12-b5a4-5d8744858381"
testing_pr: 1827
testing_sha: f88e1ecbfc3e548e4320f2b341138c92436b81a3
