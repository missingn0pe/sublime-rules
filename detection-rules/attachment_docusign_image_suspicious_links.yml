name: "Brand impersonation: DocuSign image attachment lure with no DocuSign links"
description: "Detects DocuSign phishing messages with no DocuSign links, a DocuSign logo attached, from an untrusted sender."
type: "rule"
severity: "high"
source: "type.inbound\nand (\n  (\n    0 < length(attachments) <= 8\n    and length(filter(attachments, .file_type in $file_types_images)) > 0\n  )\n  or (\n    length(attachments) > 0\n    and all(attachments,\n            .file_type in $file_types_images or .file_type == 'pdf'\n    )\n  )\n)\nand (\n  // if there are links, ensure sure they aren't docusign linnks\n  (\n    length(body.links) != 0\n    and any(body.links,\n            not strings.ilike(.href_url.domain.root_domain, \"docusign.*\")\n    )\n  )\n  // if there are no links\n  or length(body.links) == 0\n)\nand (\n  // check the image or pdf attachments for Docusign \n  any(filter(attachments,\n             .file_type in $file_types_images or .file_type == 'pdf'\n      ),\n      (\n        any(ml.logo_detect(.).brands, .name == \"DocuSign\")\n        or any(file.explode(.),\n               strings.ilike(.scan.ocr.raw, \"*DocuSign*\")\n               and (\n                 any(ml.nlu_classifier(.scan.ocr.raw).intents,\n                     .name == \"cred_theft\" and .confidence != \"low\"\n                 )\n                 or (\n                   regex.icontains(.scan.ocr.raw,\n                                   \"((re)?view|access|complete(d)?) document(s)?\",\n                                   \"[^d][^o][^cd][^ue]sign\",\n                                   \"important edocs\",\n                                   // German (Document (check|check|sign|sent))\n                                   \"Dokument (überprüfen|prüfen|unterschreiben|geschickt)\",\n                                   // German (important|urgent|immediate)\n                                   \"(wichtig|dringend|sofort)\"\n                   )\n                   and not strings.count(.scan.ocr.raw, \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\") > 3\n                 )\n               )\n        )\n      )\n      and not any(file.explode(.),\n                  (\n                    strings.ilike(.scan.ocr.raw, \"*DocuSigned By*\")\n                    and not strings.ilike(.scan.ocr.raw,\n                                          \"*DocuSign Envelope ID*\"\n                    )\n                  )\n      )\n  )\n\n  // accomidate truncated pngs and GIF files which can cause logodetect/OCR failures\n  or any(attachments,\n         (\n           .file_type =~ \"gif\"\n           or any(file.explode(.),\n                  any(.scan.exiftool.fields,\n                      .key == \"Warning\" and .value == \"Truncated PNG image\"\n                  )\n           )\n         )\n         and (\n           any(ml.logo_detect(beta.message_screenshot()).brands,\n               (\n                 .name == \"DocuSign\"\n                 or any(file.explode(beta.message_screenshot()),\n                        strings.ilike(.scan.ocr.raw, \"*DocuSign*\")\n                 )\n               )\n           )\n           and (\n             any(file.explode(beta.message_screenshot()),\n                 (\n                   any(ml.nlu_classifier(.scan.ocr.raw).intents,\n                       .name == \"cred_theft\" and .confidence != \"low\"\n                   )\n                   or regex.icontains(.scan.ocr.raw,\n                                      \"((re)?view|access|complete(d)?) document(s)?\",\n                                      \"[^d][^o][^c][^u]sign\",\n                                      \"important edocs\",\n                                      // German (Document (check|check|sign|sent))\n                                      \"Dokument (überprüfen|prüfen|unterschreiben|geschickt)\",\n                                      // German (important|urgent|immediate)\n                                      \"(wichtig|dringend|sofort)\"\n                   )\n                 )\n             )\n           )\n           and not any(file.explode(beta.message_screenshot()),\n                       (\n                         strings.ilike(.scan.ocr.raw, \"*DocuSigned By*\")\n                         and not strings.ilike(.scan.ocr.raw,\n                                               \"*DocuSign Envelope ID*\"\n                         )\n                       )\n           )\n         )\n  )\n)\nand (\n  not profile.by_sender().solicited\n  or (\n    profile.by_sender().any_messages_malicious_or_spam\n    and not profile.by_sender().any_false_positives\n  )\n)\nand not profile.by_sender().any_false_positives\n\n// negate docusign 'via' messages\nand not (\n  any(headers.hops,\n      any(.fields,\n          .name == \"X-Api-Host\" and strings.ends_with(.value, \"docusign.net\")\n      )\n  )\n  and strings.contains(sender.display_name, \"via\")\n)\n\n// negate docusign originated emails\nand not any(headers.hops,\n            regex.imatch(.received.server.raw, \".+.docusign.(net|com)\")\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Impersonation: Brand"
  - "Social engineering"
detection_methods:
  - "Computer Vision"
  - "Content analysis"
  - "Header analysis"
  - "Natural Language Understanding"
  - "Optical Character Recognition"
  - "Sender analysis"
  - "URL screenshot"
id: "814a5694-d626-5bf4-a1ba-a1dbcb625279"
testing_pr: 1955
testing_sha: a7b45e13dd894a979a926d55feced7e5e4c7a062
