name: "Suspicious Sharepoint Link and Body Content"
description: "Email links to Sharepoint with either suspicious display text or non-matching link attributes (link does not match any known sender attributes), along with suspicious body text."
type: "rule"
severity: "medium"
source: "type.inbound\n\nand (\n  any(ml.nlu_classifier(body.current_thread.text).intents,\n      .name == \"cred_theft\" and .confidence in (\"high\")\n  )\n  or any(ml.nlu_classifier(body.current_thread.text).tags,\n         .name == \"invoice\" and .confidence in (\"medium\", \"high\")\n  )\n)\n\n// not from Sharepoint itself\nand (\n  not any(headers.hops,\n          .authentication_results.compauth.verdict is not null\n          and .authentication_results.compauth.verdict == \"pass\"\n          and sender.email.domain.domain in (\n            \"microsoft.com\",\n            \"sharepointonline.com\"\n          )\n  )\n)\n\n\n// https://github.com/sublime-security/sublime-rules/blob/main/detection-rules/link_sharepoint_sus_name.yml\nand (\n  any(filter(body.links,\n             (\n               .href_url.domain.root_domain == \"sharepoint.com\"\n               or .href_url.domain.root_domain == \"1drv.ms\"\n               // handle urls with mimecast rewriting\n               or (\n                 .href_url.domain.root_domain == 'mimecastprotect.com'\n                 and strings.icontains(.href_url.query_params,\n                                       '.sharepoint.com'\n                 )\n               )\n             )\n             and .display_text != \"Open\"\n      ),\n\n      // the file name does not include lowercase letters, while allowing for non letter chars\n      regex.match(.display_text, '^[^a-z]+$')\n\n      // suspicious Sharepoint links\n      // typically Sharepoint links that come from the same tenant as the email will contain the sender's domain or \"username\" (the local_part in this case)\n      or (\n        not strings.icontains(.href_url.domain.domain, sender.email.domain.sld)\n        and not strings.icontains(.href_url.path, sender.email.local_part)\n        and not strings.icontains(.href_url.path, sender.email.domain.sld)\n      )\n\n      // file sharing service references\n      or strings.icontains(.display_text, 'dropbox')\n      or strings.icontains(.display_text, 'docusign')\n\n      // file name lures\n      // secure theme\n      or regex.icontains(.display_text, 'secured?.*(?:file|document|docs|fax)')\n      or regex.icontains(.display_text, 'important.*(?:file|document|docs|fax)')\n      or regex.icontains(.display_text, 'shared?.*(?:file|document|docs|fax)')\n      or regex.icontains(.display_text, 'protected.*(?:file|document|docs|fax)')\n      or regex.icontains(.display_text, 'encrypted.*(?:file|document|docs|fax)')\n\n      // scanner theme\n      or strings.icontains(.display_text, 'scanne[rd]_')\n      // image themed\n      or strings.icontains(.display_text, '_IMG_')\n      or regex.icontains(.display_text, '^IMG[_-](?:\\d|\\W)+$')\n\n      // digits\n      or regex.icontains(.display_text, 'doc(?:ument)?\\s?\\d+$')\n      or regex.icontains(.display_text, '^\\d+$')\n\n      // onedrive theme\n      or strings.icontains(.display_text, 'one_docx')\n      or strings.icontains(.display_text, 'OneDrive')\n      or regex.icontains(.display_text, 'A document.*One.?Drive')\n\n      // action in file name\n      or strings.icontains(.display_text, 'click here')\n      or strings.icontains(.display_text, 'Download PDF')\n      or strings.icontains(.display_text, 'Validate')\n\n      // limited file name to \"confidential\"\n      or .display_text =~ 'Confidentiality'\n      or .display_text =~ 'Confidential'\n\n      // invoice themes\n      or any(ml.nlu_classifier(.display_text).entities, .name == \"financial\")\n      or strings.icontains(.display_text, 'payment')\n      or strings.icontains(.display_text, 'invoice')\n      or regex.icontains(.display_text, 'INV(?:_|\\s)?\\d+$')\n      // starts with INV_ or INV\\x20\n      or regex.icontains(.display_text, '^INV(?:_|\\s)')\n      or regex.icontains(.display_text, 'P[O0]\\W+?\\d+$')\n      or strings.icontains(.display_text, 'receipt')\n      or strings.icontains(.display_text, 'billing')\n      or (\n        strings.icontains(.display_text, 'statement')\n        and not .display_text =~ \"Privacy Statement\"\n      )\n      or strings.icontains(.display_text, 'Past Due')\n      or regex.icontains(.display_text, 'Remit(tance)?')\n      or strings.icontains(.display_text, 'Purchase Order')\n\n      // contract language\n      or strings.icontains(.display_text, 'settlement')\n      or strings.icontains(.display_text, 'contract agreement')\n      or regex.icontains(.display_text, 'Pr[0o]p[0o]sal')\n      or strings.icontains(.display_text, 'contract doc')\n\n      // the document name is the same as the org name\n      // as determined by the footer \n      or (\n        strings.icontains(body.current_thread.text,\n                          strings.concat('This email is generated through ',\n                                         .display_text\n                          )\n        )\n        and strings.icontains(body.current_thread.text,\n                              strings.concat(\"\\'s use of Microsoft 365 and may contain content that is controlled by \",\n                                             .display_text\n                              )\n        )\n      )\n\n      // use NLU to extract the org name from the Link and compare to the org\n      // as determined by the footer\n      or any(\n             // create a list of org names\n             // if the display_text contains things like \"Acme Co. - RFQ\"\n             // the \"org\" via NLU often becomes \"Acme Co. -\"\n             map(filter(ml.nlu_classifier(.display_text).entities,\n                        .name == \"org\"\n                        and .text is not null\n                        and not strings.icontains(.text, \"Microsoft 365\")\n                 ),\n                 .text\n             ),\n             // if we run NLU a second time, it cleans up the extra parts\n             any(ml.nlu_classifier(.).entities,\n                 strings.icontains(body.current_thread.text,\n                                   strings.concat('This email is generated through ',\n                                                  .text\n                                   )\n                 )\n                 and strings.icontains(body.current_thread.text,\n                                       strings.concat(\"\\'s use of Microsoft 365 and may contain content that is controlled by \",\n                                                      .text\n                                       )\n                 )\n             )\n      )\n  )\n)\n\n// and it's not an internal share\nand not any(headers.hops,\n            any(.fields,\n                .name == \"X-MS-Exchange-CrossTenant-AuthAs\"\n                and .value == \"Internal\"\n            )\n)\n"
attack_types:
  - "Credential Phishing"
tactics_and_techniques:
  - "Evasion"
  - "Free file host"
  - "Social engineering"
detection_methods:
  - "Content analysis"
  - "Header analysis"
  - "Natural Language Understanding"
  - "URL analysis"
id: "56be1d10-5320-55b6-befb-3d1d395f26e3"
testing_pr: 2073
testing_sha: a15161509cd15020ba45944bb20ae050e9ab182e
